import pygame
import random
import sys

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600
GRAVITY = 0.25
FLAP_SPEED = -7
PIPE_WIDTH = 70
PIPE_HEIGHT = 400
PIPE_GAP = 150
FPS = 60
FONT = pygame.font.Font(None, 36)

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BACKGROUND_COLORS = [(94, 129, 162), (46, 204, 113), (155, 89, 182), (230, 126, 34), (52, 152, 219)]

# Helper function to draw text on screen
def draw_text(text, font, color, surface, x, y):
    textobj = font.render(text, 1, color)
    textrect = textobj.get_rect()
    textrect.topleft = (x, y)
    surface.blit(textobj, textrect)

# Function to generate pipes
def create_pipe():
    random_y = random.randint(-PIPE_HEIGHT // 2, PIPE_HEIGHT // 2)
    bottom_pipe = pipe_surface.get_rect(midtop=(SCREEN_WIDTH + 50, SCREEN_HEIGHT // 2 + PIPE_GAP // 2 + random_y))
    top_pipe = pipe_surface.get_rect(midbottom=(SCREEN_WIDTH + 50, SCREEN_HEIGHT // 2 - PIPE_GAP // 2 + random_y))
    return bottom_pipe, top_pipe

# Function to move pipes
def move_pipes(pipes):
    for pipe in pipes:
        pipe.centerx -= 2.5
    return pipes

# Function to draw pipes
def draw_pipes(pipes):
    for pipe in pipes:
        if pipe.bottom >= SCREEN_HEIGHT:
            screen.blit(pipe_surface, pipe)
        else:
            flip_pipe = pygame.transform.flip(pipe_surface, False, True)
            screen.blit(flip_pipe, pipe)

# Function to check collisions
def check_collision(pipes):
    for pipe in pipes:
        if bird_rect.colliderect(pipe):
            return True
    if bird_rect.top <= -100 or bird_rect.bottom >= 600:
        return True
    return False

# Initialize screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Flappy Rat')

# Load assets
bg_surface = pygame.image.load('background-day.png').convert()
bg_surface = pygame.transform.scale(bg_surface, (SCREEN_WIDTH, SCREEN_HEIGHT))

bird_surface = pygame.image.load('rat.png').convert_alpha()
bird_rect = bird_surface.get_rect(center=(100, SCREEN_HEIGHT // 2))

pipe_surface = pygame.image.load('pipe-green.png').convert()

clock = pygame.time.Clock()

# Game variables
gravity = 0.25
bird_movement = 0
game_active = True
score = 0
level = 1
level_change = 10

pipes = []
SPAWNPIPE = pygame.USEREVENT
pygame.time.set_timer(SPAWNPIPE, 1200)

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and game_active:
                bird_movement = FLAP_SPEED
            if event.key == pygame.K_SPACE and not game_active:
                pipes = []
                bird_rect.center = (100, SCREEN_HEIGHT // 2)
                bird_movement = 0
                score = 0
                level = 1
                game_active = True

        if event.type == SPAWNPIPE:
            pipes.extend(create_pipe())

    # Background color change every 10 levels
    if score > 0 and score % level_change == 0:
        bg_surface.fill(BACKGROUND_COLORS[(score // level_change) % len(BACKGROUND_COLORS)])

    # Bird movement
    bird_movement += gravity
    bird_rect.centery += bird_movement

    # Draw background
    screen.blit(bg_surface, (0, 0))

    # Draw and move pipes
    pipes = move_pipes(pipes)
    draw_pipes(pipes)

    # Draw bird
    rotated_bird = pygame.transform.rotate(bird_surface, -bird_movement * 3)
    screen.blit(rotated_bird, bird_rect)

    # Collision detection
    game_active = not check_collision(pipes)

    # Scoring
    for pipe in pipes:
        if pipe.centerx == bird_rect.centerx:
            score += 1

    draw_text(f'Score: {score}', FONT, BLACK, screen, 10, 10)

    # Level display
    draw_text(f'Level: {level}', FONT, BLACK, screen, 10, 50)

    # Level increase
    if score > 0 and score % level_change == 0:
        level += 1

    pygame.display.update()
    clock.tick(FPS)
